import{reactive as e,watch as t,defineComponent as o,useSlots as i,ref as n,onMounted as l,openBlock as c,createElementBlock as a,unref as r,createCommentVNode as d,renderSlot as p}from"vue";var s=Object.freeze({__proto__:null});var u={library:"https://accounts.google.com/gsi/client",defaultButtonConfig:{theme:"outline",size:"large"},scopes:"email profile openid"};const g=e({clientId:null,popupType:"CODE",prompt:!1,autoLogin:!1,idConfiguration:null,buttonConfig:u.defaultButtonConfig,callback:()=>{},error:null}),f=e({apiLoaded:!1,apiLoadIntitited:!1}),b=e=>{try{const t=e.split(".")[1].replace(/-/g,"+").replace(/_/g,"/"),o=decodeURIComponent(atob(t).split("").map((function(e){return"%"+("00"+e.charCodeAt(0).toString(16)).slice(-2)})).join(""));return JSON.parse(o)}catch(e){throw"JWT provided is invalid"}},m=new Promise((e=>{const t="undefined"!=typeof window;if(!f.apiLoadIntitited&&t){const t=document.createElement("script");f.apiLoadIntitited=!0,t.addEventListener("load",(()=>{f.apiLoaded=!0,e(window.google)})),t.src=u.library,t.async=!0,t.defer=!0,document.head.appendChild(t)}})),w=e=>{f.apiLoadIntitited?f.apiLoaded?e(window.google):t((()=>f.apiLoaded),(t=>{t&&e(window.google)})):m.then((t=>{e(t)}))},I=(e,t,o,i)=>{if(!e.client_id)throw new Error("Prop client id required since plugin is not initialized with a client id");w((()=>{((e,t,o,i,n)=>{if(n){const t=e.callback;e.callback=e=>{e.credential?t&&t(e):n(e)}}window.google.accounts.id.initialize(e);const l=t.value;l&&!i&&window.google.accounts.id.renderButton(l,o)})(e,t,o.buttonConfig,i,o.error),o.prompt&&k({clientId:o.clientId,callback:o.callback,error:o.error,autoLogin:o.autoLogin})}))},y=e=>new Promise(((t,o)=>{w((i=>{if(!(e&&e.clientId||g.clientId))throw new Error("clientId is required since the plugin is not initialized with a Client Id");i.accounts.oauth2.initCodeClient({client_id:e&&e.clientId||g.clientId||"",scope:u.scopes,ux_mode:"popup",callback:e=>{e.code?t(e):o(e)},error_callback:e=>{o(e)}}).requestCode()}))})),h=e=>new Promise(((t,o)=>{w((i=>{if(!(e&&e.clientId||g.clientId))throw new Error("clientId is required since the plugin is not initialized with a Client Id");i.accounts.oauth2.initTokenClient({client_id:e&&e.clientId||g.clientId||"",scope:u.scopes,callback:e=>{e.access_token?t(e):o(e)},error_callback:e=>{o(e)}}).requestAccessToken()}))})),k=e=>{if(!e&&(e={}),!e.clientId&&!g.clientId)throw new Error("clientId is required");const t={};return e.clientId&&(t.client_id=e.clientId),!e.clientId&&g.clientId&&(t.client_id=g.clientId),e.context&&(t.context=e.context),null!=e.autoLogin&&(t.auto_select=e.autoLogin),null!=e.cancelOnTapOutside&&(t.cancel_on_tap_outside=e.cancelOnTapOutside),new Promise(((o,i)=>{t.callback=t=>{e&&e.callback&&e.callback(t),t.credential?o(t):i(t)},w((o=>{o.accounts.id.initialize(t),o.accounts.id.prompt((t=>{e&&e.onNotification&&e.onNotification(t),(e=>{const t=e.notification;let o="";t.isNotDisplayed()&&(o="suppressed_by_user"===t.getNotDisplayedReason()?"Prompt was suppressed by user'. Refer https://developers.google.com/identity/gsi/web/guides/features#exponential_cooldown for more info":`Prompt was not displayed, reason for not displaying: ${t.getNotDisplayedReason()}`),t.isSkippedMoment()&&(o=`Prompt was skipped, reason for skipping: ${t.getSkippedReason()}`),o.length&&(e.error?e.error(o):e.reject(o))})({notification:t,reject:i,error:e&&e.error})}))}))}))},_=()=>{w((e=>{e.accounts.id.disableAutoSelect()}))};var C=o({name:"GoogleLogin",props:{clientId:{type:String,required:!1},prompt:{type:Boolean,required:!1,default:!1},autoLogin:{type:Boolean,required:!1,default:!1},popupType:{type:String,required:!1},idConfiguration:{type:Object,required:!1},buttonConfig:{type:Object,required:!1},callback:{type:Function,required:!1},error:{type:Function,required:!1}},setup(e){const t=e,o=!!i().default,s=((e,t)=>{const o={...e};for(const e in t)void 0!==t[e]&&null!==t[e]&&(o[e]=t[e]);return o})(g,t),u={client_id:s.clientId||null,auto_select:s.autoLogin||!1,callback:s.callback,...s.idConfiguration},f=n();return l((()=>{I(u,f,s,o),t.popupType&&!o&&console.warn("Option 'popupType' is ignored since a slot which act as a custom login button was not found!!!")})),(e,t)=>(c(),a("div",{class:"g-btn-wrapper",onClick:t[0]||(t[0]=e=>r(o)&&void("TOKEN"===r(s).popupType?h({clientId:s.clientId}).then((e=>{s.callback&&s.callback(e)})).catch((e=>{s.error&&s.error(e)})):y({clientId:s.clientId}).then((e=>{s.callback&&s.callback(e)})).catch((e=>{s.error&&s.error(e)}))))},[r(o)?d("v-if",!0):(c(),a("span",{key:0,ref_key:"buttonRef",ref:f,class:"g-btn"},null,512)),p(e.$slots,"default")]))}});!function(e,t){void 0===t&&(t={});var o=t.insertAt;if(e&&"undefined"!=typeof document){var i=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css","top"===o&&i.firstChild?i.insertBefore(n,i.firstChild):i.appendChild(n),n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e))}}("\n.g-btn-wrapper[data-v-5e610566] {\n  display: inline-block;\n}\n"),C.__scopeId="data-v-5e610566",C.__file="src/plugin/GoogleLogin.vue";var L={install:(e,t)=>{t&&(e=>{e.clientId&&(g.clientId=e.clientId),e.popupType&&(g.popupType=e.popupType),null!=e.prompt&&(g.prompt=e.prompt),null!=e.autoLogin&&(g.autoLogin=e.autoLogin),e.idConfiguration&&(g.idConfiguration=e.idConfiguration),e.buttonConfig&&(g.buttonConfig=e.buttonConfig),e.callback&&(g.callback=e.callback)})(t),m.then((()=>{if(t.clientId){const e={client_id:t.clientId,auto_select:!0===t.autoLogin,callback:t.callback,use_fedcm_for_prompt:!0,...t.idConfiguration};window.google.accounts.id.initialize(e),t.prompt&&window.google.accounts.id.prompt()}})),e.component("GoogleLogin",C)}};export{s as CallbackTypes,C as GoogleLogin,b as decodeCredential,L as default,y as googleAuthCodeLogin,_ as googleLogout,k as googleOneTap,w as googleSdkLoaded,h as googleTokenLogin};
